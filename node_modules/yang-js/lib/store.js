// Generated by CoffeeScript 2.5.1
(function() {
  var Container, Store, delegate;

  delegate = require('delegates');

  Container = require('./container');

  Store = (function() {
    class Store extends Container {
      constructor() {
        // CS2 does not support below
        // unless this instanceof Store then return new Store arguments...
        super(...arguments);
        this.state.schemas = new Set();
        this.state.models = new Map();
      }

      use(...schemas) {
        schemas.filter(function(s) {
          return s.kind === 'module';
        }).forEach((s) => {
          return this.schemas.add(s);
        });
        return this;
      }

      add(...models) {
        models.filter(function(m) {
          return m.kind === 'module';
        }).forEach((m) => {
          m.on('error', this.emit.bind(this, 'error'));
          return this.models.set(m.name, m);
        });
        return this;
      }

      access(model) {
        if (!this.models.has(model)) {
          throw this.error(`unable to locate '${model}' instance in the Store`);
        }
        return this.models.get(model);
      }

      set(data) {
        this.models.clear();
        this.schemas.forEach((s) => {
          return s.eval(data, this);
        });
        return this;
      }

      find(pattern, opts) {
        var i, key, match, v, value;
        i = this.models.entries();
        while ((v = i.next(), !v.done)) {
          [key, value] = v.value;
          match = value.find(pattern, opts);
          if (match.length) {
            return match;
          }
        }
        return [];
      }

      toJSON(key, state = true) {
        var i, k, model, name, obj, ref, v;
        obj = {};
        i = this.models.entries();
        while ((v = i.next(), !v.done)) {
          [name, model] = v.value;
          if (model == null) {
            continue;
          }
          ref = model.toJSON(false, state);
          for (k in ref) {
            v = ref[k];
            obj[k] = v;
          }
        }
        return obj;
      }

    };

    Store.prototype.logger = require('debug')('yang:store');

    delegate(Store.prototype, 'state').getter('schemas').getter('models');

    delegate(Store.prototype, 'models').method('has');

    Store.property('store', {
      get: function() {
        return this;
      }
    });

    return Store;

  }).call(this);

  module.exports = Store;

}).call(this);
